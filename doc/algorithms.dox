/*
 * Copyright (C) 2020 Southern Storm Software, Pty Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/**
\file algorithms.dox
\page algorithms Algorithms
\tableofcontents

This page lists all 10 finalists of the <a href="https://csrc.nist.gov/projects/lightweight-cryptography/round-2-candidates">NIST Lightweight Cryptography Competition</a>
and the degree of support for each algorithm in the library.

\section alg_which_one Which algorithm should I use?

This is a tough question given that as of early-2021 the NIST competition has
whittled the list down to 10 final candidates but there is still a lot of
variation in the candidates.  But if you want to get encrypting now:

\li \ref alg_ascon "ASCON-128" was already selected as a finalist for the
<a href="https://competitions.cr.yp.to/caesar-submissions.html">CAESAR
AEAD competition</a> (128-bit key).
\li \ref alg_tinyjambu "TinyJAMBU-128" has exceptional performance
with a small RAM and flash memory footprint (128-bit key, with options
for 192-bit and 256-bit keys as well).
\li \ref alg_gift_cofb "GIFT-COFB" is the fastest finalist that uses a
block cipher rather than a permutation.  RAM usage for the default
"full" variant in this library can be a bit large (320 bytes for the
key schedule), but the "small" and "tiny" variants provide convenient
space-vs-time tradeoffs (80 bytes and 16 bytes respectively for the
key schedules).

Note that these are my own personal preferences and are not based on any
in-depth security analysis.  The above algorithms could fall to an attack
tomorrow but for now they have good space and speed trade-offs when
implemented in software on 32-bit platforms.

\section alg_properties Summary

The following table summarises the interesting properties of the 10
finalists to the NIST Lightweight Cryptography competition.  More
details are provided in the sections below.

<table>
<tr><td>Algorithm</td><td>Key Sizes</td><td>Core</td><td>Mode</td><td>Nonce Reuse</td><td>Side Channels</td><td>Post Quantum</td><td>Hashing</td></tr>
<tr><td>ASCON</td><td>128/160</td><td>ASCON</td><td>MonkeyDuplex</td><td> </td><td>M</td><td>K</td><td>Digest/XOF</td></tr>
<tr><td>Elephant</td><td>128</td><td>Spongent/Keccak</td><td>Elephant</td><td> </td><td> </td><td> </td><td> </td></tr>
<tr><td>GIFT-COFB</td><td>128</td><td>GIFT-128</td><td>COFB</td><td> </td><td>M</td><td> </td><td> </td></tr>
<tr><td>Grain-128AEAD</td><td>128</td><td>Grain-128</td><td>Grain-128AEAD</td><td> </td><td> </td><td> </td><td> </td></tr>
<tr><td>ISAP</td><td>128</td><td>ASCON/Keccak</td><td>Duplex</td><td> </td><td>Y</td><td> </td><td> </td></tr>
<tr><td>PHOTON-Beetle</td><td>128</td><td>PHOTON-256</td><td>Beetle</td><td> </td><td> </td><td> </td><td>Digest</td></tr>
<tr><td>Romulus-N+</td><td>128</td><td>SKINNY-128-384+</td><td>Romulus-N</td><td> </td><td> </td><td> </td><td> </td></tr>
<tr><td>Romulus-M+</td><td>128</td><td>SKINNY-128-384+</td><td>Romulus-M</td><td>Y</td><td> </td><td> </td><td> </td></tr>
<tr><td>SPARKLE</td><td>128/192/256</td><td>SPARKLE</td><td>Beetle</td><td> </td><td> </td><td>K</td><td>Digest</td></tr>
<tr><td>TinyJAMBU</td><td>128/192/256</td><td>TinyJAMBU</td><td>TinyJAMBU</td><td> </td><td>M</td><td>K</td><td> </td></tr>
<tr><td>Xoodyak</td><td>128</td><td>Xoodoo</td><td>Cyclist</td><td> </td><td>R</td><td> </td><td>Digest/XOF</td></tr>
</table>

"Core" indicates the core block operation that the sponge or block cipher
mode is built around, and "Mode" indicates the mode itself.

All 10 finalists to the competition are inverse-free.  In particular,
the finalists that use block ciphers (GIFT-COFB and Romulus) only use
the block encryption operation.

"Nonce Reuse" indicates that the algorithm provides some resistance against
nonce reuse.

"Side Channels" indicates that the algorithm provides some resistance
against power analysis side channels: "Y" indicates that the resistance is
built in, "M" indicates that the resistance is present only if the
core block operation is masked, and "R" indicates that the resistance is
present only if the cipher is rekeyed after every packet.

"Post Quantum" indicates if the algorithm has resistance against
post-quantum adversaries: "Y" indicates that all key sizes are resistant,
"K" indicates that key sizes larger than 128 bits (e.g. 160, 192, or 256)
provide the post-quantum resistance.

\section alg_side_channels Algorithms with side channel protection

The following algorithm implementations in this library attempt to provide
some protection against power analysis side channels:

\li \ref alg_ascon "ASCON"
\li \ref alg_gift_cofb "GIFT-COFB"
\li \ref alg_isap "ISAP"
\li \ref alg_tinyjambu "TinyJAMBU"
\li \ref alg_xoodyak "Xoodyak"

These implementations have not yet been subjected to rigorous analysis,
so the level of protection may not be as great as hoped.

In the case of ISAP, the protection is built into the algorithm.
For the others, the "individual" directory contains "*_masked" variants
side by side with the original unprotected versions.

\section alg_ascon ASCON

<b>Definition:</b> \ref ascon128.h, \ref ascon128-masked.h

The ASCON family consists of the following AEAD algorithms:

\li ASCON-128 with a 128-bit key, a 128-bit nonce, and a 128-bit tag.
\li ASCON-128-a with a 128-bit key, a 128-bit nonce, and a 128-bit tag.
\li ASCON-80pq with a 160-bit key, a 128-bit nonce, and a 128-bit tag.

ASCON-128 is the recommended algorithm from the NIST submission.
ASCON-128-a is faster but does not mix the input state quite as
much as ASCON-128.  ASCON-80pq is essentially the same as ASCON-128
but it has a 160-bit key which may give added resistance against
quantum computers.

The library also implements the ASCON-HASH and ASCON-XOF hashing
algorithms as companions to the AEAD mode.

This library also provides a masked implementation of ASCON.

<b>Recommendation:</b> Use ASCON-128 for now unless you consider the
128-bit key length to be too short, in which case you should use ASCON-80pq.

\section alg_elephant Elephant

<b>Definition:</b> \ref elephant-delirium.h, \ref elephant-dumbo.h, \ref elephant-jumbo.h

Elephant is a family of authenticated encryption algorithms based
around the Spongent-pi and Keccak permutations.

\li Dumbo has a 128-bit key, a 96-bit nonce, and a 64-bit authentication
tag.  It is based around the Spongent-pi[160] permutation.
\li Jumbo has a 128-bit key, a 96-bit nonce, and a 64-bit authentication
tag.  It is based around the Spongent-pi[176] permutation.
\li Delirium has a 128-bit key, a 96-bit nonce, and a 128-bit authentication
tag.  It is based around the Keccak[200] permutation.

<b>Recommendation:</b> The specification recommends Dumbo.

\section alg_gift_cofb GIFT-COFB

<b>Definition:</b> \ref gift-cofb.h, \ref gift-cofb-masked.h

GIFT-COFB is an authenticated encryption algorithm that combines
the COFB (COmbined FeedBack) block cipher mode with the bit-sliced
version of the GIFT-128 block cipher.  The algorithm has a 128-bit key,
a 128-bit nonce, and a 128-bit authentication tag.

The GIFT-128 block cipher was designed with hardware FPGA/ASIC implementations
in mind, but with the <a href="https://eprint.iacr.org/2020/412.pdf">fixsliced</a>
representation it is possible to acheive good software performance as well.
This library implements fixslicing by default.

GIFT-COFB is a single-pass encryption algorithm, compared to the two-pass
algorithm used by SUNDAE-GIFT.  Out of all the GIFT-128 based submissions
to NIST, GIFT-COFB has the best software performance, although HYENA is
fairly close.

This library also implements a masked version of GIFT-COFB to provide
protection against power analysis side channels.

\section alg_grain_128aead Grain-128AEAD

<b>Definition:</b> \ref grain128.h

Grain-128AEAD is an authenticated encryption algorithm based around a
combination of a 128-bit linear feedback shift register (LFSR) and a
128-bit non-linear feedback shift register (NFSR).  It is a member of
the Grain family of stream ciphers.

\section alg_isap ISAP

<b>Definition:</b> \ref isap.h

ISAP is a family of authenticated encryption algorithms that are built
around the Keccak-p[400] or ASCON permutations.  There are four algorithms
in the family, each of which have a 128-bit key, a 128-bit nonce, and a
128-bit tag:

\li ISAP-K-128A based around the Keccak-p[400] permutation with a
reduced number of rounds.
\li ISAP-A-128A based around the ASCON permutation with a reduced
number of rounds.
\li ISAP-K-128 based around the Keccak-p[400] permutation.
\li ISAP-A-128 based around the ASCON permutation.

ISAP is designed to provide some protection against adversaries
using differential power analysis to determine the key.  The downside
is that key setup is very slow.  The Keccak-p[400] permutation is
slower than ASCON on 32-bit platforms.

<b>Recommendation:</b> The specification recommends ISAP-K-128A,
although ISAP-A-128A may be a better choice on 32-bit platforms for
performance reasons.

\section alg_photon_beetle PHOTON-Beetle

<b>Definition:</b> \ref photon-beetle.h

PHOTON-Beetle is a family of authenticated encryption algorithms based
on the PHOTON-256 permutation and using the Beetle sponge mode.
There are three algorithms in the family:

\li PHOTON-Beetle-AEAD-ENC-128 with a 128-bit key, a 128-bit nonce, and a
128-bit tag.  Data is handled in 16 byte blocks.
\li PHOTON-Beetle-AEAD-ENC-32 with a 128-bit key, a 128-bit nonce, and a
128-bit tag.  Data is handled in 4 byte blocks.
\li PHOTON-Beetle-Hash with a 256-bit hash output.  The initial data is
handled as a 16 byte block, and then the remaining bytes are processed
in 4 byte blocks.

<b>Recommendation:</b> The specification recommends PHOTON-Beetle-AEAD-ENC-128.

\section alg_romulus Romulus

<b>Definition:</b> \ref romulus.h

<b>Nonce Reuse:</b> Resistant against nonce reuse as long as the combination
of the associated data (AD) and plaintext is unique.

Romulus is a family of authenticated encryption algorithms that
are built around the SKINNY-128 tweakable block cipher.  There
are two members in the family in round 3 of the competition:

\li Romulus-N+ has a 128-bit key, a 128-bit nonce, and a 128-bit tag,
based around the SKINNY-128-384+ tweakable block cipher.  This is the
primary member of the family.
\li Romulus-M+ has a 128-bit key, a 128-bit nonce, and a 128-bit tag,
based around the SKINNY-128-384+ tweakable block cipher.

The Romulus-M variants are resistant to nonce reuse as long as the
combination of the associated data and plaintext is unique.  If the
same associated data and plaintext are reused under the same nonce,
then the scheme will leak that the same plaintext has been sent for a
second time but will not reveal the plaintext itself.

The Romulus block padding and domain separation schemes are quite complex,
so it is one of the larger algorithms to implement in software.

<b>Recommendation:</b> The specification recommends Romulus-N+, or
Romulus-M+ if resistance against nonce reuse is desirable.

\section alg_sparkle SPARKLE

<b>Definition:</b> \ref sparkle.h

SPARKLE is a family of encryption and hash algorithms that are based
around the SPARKLE permutation.  There are three versions of the
permutation with 256-bit, 384-bit, and 512-bit state sizes.
The algorithms in the family are:

\li Schwaemm256-128 with a 128-bit key, a 256-bit nonce, and a 128-bit tag.
\li Schwaemm192-192 with a 192-bit key, a 192-bit nonce, and a 192-bit tag.
\li Schwaemm128-128 with a 128-bit key, a 128-bit nonce, and a 128-bit tag.
\li Schwaemm256-256 with a 256-bit key, a 256-bit nonce, and a 256-bit tag.
\li Esch256 hash algorithm with a 256-bit digest output.
\li Esch384 hash algorithm with a 384-bit digest output.

SPARKLE has good performance in software on 32-bit platforms.

<b>Recommendation:</b> Schwaemm256-128 and Esch256 are the recommended
variants from the NIST submission.

\section alg_tinyjambu TinyJAMBU

<b>Definition:</b> \ref tinyjambu.h, \ref tinyjambu-masked.h

TinyJAMBU is a family of encryption algorithms that are built around a
lightweight 128-bit permutation.  There are three variants of TinyJAMBU
with different key sizes:

\li TinyJAMBU-128 with a 128-bit key, a 96-bit nonce, and a 64-bit tag.
\li TinyJAMBU-192 with a 192-bit key, a 96-bit nonce, and a 64-bit tag.
\li TinyJAMBU-256 with a 256-bit key, a 96-bit nonce, and a 64-bit tag.

TinyJAMBU has one of the smallest RAM and flash memory footprints
out of all of the NIST algorithms.  Performance of TinyJAMBU-128 is
also excellent.

<b>Recommendation:</b> TinyJAMBU-128 is the recommended variant in the
NIST submission.  Use TinyJAMBU-256 if you need a greater security margin.

\section alg_xoodyak Xoodyak

<b>Definition:</b> \ref xoodyak.h, \ref xoodyak-masked.h

Xoodyak is an authenticated encryption and hash algorithm pair based
around the 384-bit Xoodoo permutation that is similar in structure to
Keccak but is more efficient than Keccak on 32-bit embedded devices.
The Cyclist mode of operation is used to convert the permutation
into a sponge for the higher-level algorithms.

The Xoodyak encryption mode has a 128-bit key, a 128-bit nonce,
and a 128-bit authentication tag.  The Xoodyak hashing mode has a
256-bit fixed hash output and can also be used as an extensible
output function (XOF).

The Xoodyak specification describes a re-keying mechanism where the
key for one packet is used to derive the key to use on the next packet.
This provides some resistance against side channel attacks by making
the session key a moving target.  This library does not currently
implement re-keying.

This library also provides a masked implementation of Xoodyak.

<b>Recommendation:</b> There is only one encryption algorithm and
one hash algorithm in the Xoodyak family, so they the recommended ones.

\section alg_internal Internal block operations

Many of the algorithms are built on top of internal block ciphers and
sponge block operations.  Some of these operations are shared between
multiple algorithms so they are provided in a common internal location.

All of the internal block operations are implemented in source files that
start with the <tt>internal-</tt> prefix.  They are not intended to be part
of the public API for the AEAD algorithms.

If you wish to improve the performance of an algorithm implementation
with assembly code or vector instructions, then the best place to start
is with the internal block operation code.

*/
